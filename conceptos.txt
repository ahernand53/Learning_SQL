¿Qué es un dato?

Un dato es algo que nos va a permitir describir un objeto. Ese objeto global lo vamos a poder llamar “Entidad”. Una entidad puede estar llena de datos.

Existen 3 niveles de Abstracción en las Bases de Datos:

Conceptual: Se tiene que empezar a modelar una Base de Datos dependiendo de lo que se quiere hacer basado en los conceptos de “entidad” y “relación”.
Lógico: El diagrama lógico nos va a resolver ciertas dudas de consistencia, para evitar crear loops o evitar que tenga cosas que no tengan sentido en nuestro proyecto.
Físico: Es finalmente cómo lo va a ver la Base de Datos.

Igual que en cualquier lenguaje de programación, existen variables en las Bases de Datos:

Caracteres: Pueden ser desde letras hasta caracteres especiales.
Numérico: Del 0 al 9 pero con una longitud especial.
Varchar: Caracteres con un formato más variable.
Imagen
Fecha: Generalmente van acompañadas de una hora.
Moneda: esto facilita todo si se trabaja con diferentes denominaciones.
Texto: Variables que tienen mayor tamaño que un char o que un varchar.
Bit: Se puede trabajar con 1 y 0 o también con verdadero y falso.
Decimal
Esquema = Es la estructura lógica que va a tener una Base de Datos.
Instancia = Contenido de partículas que tiene una Base de Datos en un instante de tiempo.

¿Qué debemos esperar para modelar una Base de Datos?

Los datos.
La relación que existe entre los datos.
Restricciones de los datos.
Existen 3 cosas para poder hacer la descripción de una Base de Datos:

DML = Data Manipulation Language o Lenguaje de Manipulación de Datos.
DDL = Data Definition Language o Lenguaje de Definición de Datos.
SQL = Structured Query Language o Lenguaje de Consulta Estructurada.
Otros tipos de Bases de Datos:

Bases de Datos Relacionales
Basadas en Objetos Relacionales
XML
NoSQL
In-Memory

Características de Bases de Datos SQL:

Es un lenguaje estructurado.
Tiene un esquema de tablas.
Tiene integración con otros tipos de archivos.
Tiene indexación por medio de árboles.
Características de Bases de Datos NoSQL:

Se puede trabajar con un lenguaje estructurado o con uno no estructurado.
Tiene diferente tipo de indexación. Se utiliza normalmente Json.
Tiene un crecimiento horizontal.
Características de Bases de Datos Analíticas y de Bigdata:

Son de lenguaje no estructurado.
Tiene integración de muchos sistemas.
Tiene integración también a sistemas tradicionales y sistemas de engagement.
Principio “divide y vencerás”
Se basa en esquemas Scale Out.
Crecimiento horizontal.
Características de Bases de Datos basadas en aceleración:

Normalmente basadas in Memory.
Uso de aceleradores como GPU, flash cards, FPGAs.
Tienen estructuras diferentes, por ejemplo, basadas en nodos.
Uso frecuente de ambientes empresariales productivos y de datawarehouse.

Scale Up: Crecimiento Vertical
Scale Out: Crecimiento Horizontal

Entidad = Es una abstracción del mundo real.

Barker = Aquí una entidad se representa como una caja, es una caja que va a tener atributos. Estos atributos van a poder ser obligatorios u opcionales.

Para definir una Relación tenemos que tener en cuenta los siguientes puntos:

La obligatoriedad. Ésta se denota con una línea continua.
Opcional. Se representa con una línea punteada.

Tipos de relaciones
0 - 1 ------------ (ej. pasaporte)
1 - 1 _______ (ej. numero de identificación del ciudadano)
0 - M ----------- { (ej. cantidad dispositivos electrónicos
1 - M _______ { (ej. nro de cursos que estoy tomando)
M - M }-----------{

tipos de selectores:
* -> obligatorios
o -> Opcionales
# -> llave
#fk -> llave foraneas

Las llaves nos dan acceso a los datos de una entidad, su notación es
la de numeral #.

Las llaves tienen que ser irrepetibles y obligatorias, por lo tanto el ID puede ser una llave.

Una llave puede ser compuesta, esta se compone de 2 numeros, entre ID y Numero de seguro social. (Como un numero de teléfono móvil).

Las llaves foráneas son llaves que van a estar en nuestra tabla, que no necesariamente son nuestras llaves primarias pero van a permitir acceder a otra tabla donde ahí sean llaves primarias.

Una llave foranea tiene que ser llave primaria de una tabla (entidad).

Las llaves son fundamentales por que son obligatoriamente índices, los cuales permiten encontrar los datos cuando se necesitan de una forma rápida y ordenada.

INDICES E INDEXACIÓN

Las llaves primarias obligatoriamente van a ser índices.
Las Bases de Datos indexan con un algoritmo llamado:Árboles B+
Los Árboles B+ son una estructura que va a tener un tronco, tres raíces, de las cuales se van a ir derivando tres raíces más por cada una, hasta donde sea necesario.
Por defecto todas las Bases de Datos están indexadas, así no le pongamos índices. Lo que sucede es que la Base de Datos siempre obliga a indexar porque siempre tienen un atributo que está oculto, este atributo es RowID.

CONSTRAINS O RESTRICCIONES

Las restricciones se pueden trabajar desde la Base de Datos. Normalmente las validaciones con restricciones se hacen desde la aplicación, pero es importante tener en cuenta que podemos hacerlo de igual forma desde la Base de Datos.
Las llaves primarias y las llaves foraneas no solamente tienen la restricción Not null, sino que además tienen la restricción unique, no puede haber otra igual.
Con check, las validaciones que podemos hacer son: Igual, mayor o igual, menor o igual, mayor qué o menor qué.
Ejemplos de restricciones:

Validación si una persona tiene cierta edad (> 18 años)
El campo no puede estar vacío Not Null
El campo no se puede repetir Unique
Validación por comparación Check (==, >=, <=, ><)
Un tipo de validación desde la base de datos que se me ocurre es; en un ecommerce, restringir el acceso a ofertas o descuentos especiales, a un tipo de usuario (Normal o Premium).

CAPAS DE ABSTRACCION DEL MODELO ENTIDAD-RELACION

Capa Conceptual: En esta capa vamos a tener varias entidades, aún sin nombre definido. Las entidades van a tener cada una sus llaves primarias y sus atributos, además van a tener relaciones.
Para que existan las relaciones “muchos a muchos” se necesitan llaves foráneas en las entidades.

Capa Lógica: El modelo Entidad-Relación para poder procesar las relaciones “muchos a muchos” las va a partir en entidades que se llaman: Entidades Débiles.

Capa Física: Este modelo va a ser el paso del modelo lógico hacia la representación que ya va a tener la Base de Datos. En esta capa, ya cada uno de los datos empieza a entrar en las clasificaciones según su tipo de dato.

Podemos encontrar varias herramientas online para realizar modelado E-R
Entre ellas:
Gliffy: abarca varios tipos de modelos y es muy sencillo de usar (mi favorito cuando era universitaria) te permite crear una cuenta gratuita.
https://www.gliffy.com/
Vertabelo: su plus está en ser colaborativo, tienes opción de crear una cuenta como estudiante, usando un email con dominio educativo.
https://www.vertabelo.com/
Cacoo: me pareció bien interactivo, incluye opciones de revisión de cambios, integración con otras herramientas de productividad y la verdad sus precios no me parecen una locura para lo que ofrece!

Atomicidad: Asegura que yo tenga un conjunto de pasos para llegar a ser una transacción exitosa.
Consistencia: Aseguro que tengo un estado válido y pasó a otro estado que sigue siendo válido.

Aislamiento: Esta propiedad asegura que una operación no puede afectar a otras. Esto asegura que la realización de dos transacciones sobre la misma información sean independientes y no generen ningún tipo de error. Esta propiedad define cómo y cuándo los cambios producidos por una operación se hacen visibles para las demás operaciones concurrentes. El aislamiento puede alcanzarse en distintos niveles, siendo el parámetro esencial a la hora de seleccionar SGBDs.

Durabilidad: (Persistencia). Esta propiedad asegura que una vez realizada la operación, ésta persistirá y no se podrá deshacer aunque falle el sistema y que de esta forma los datos sobrevivan de alguna manera.

¿Que vamos a tener en cuenta para tener nuestro diagrama final?
Entidades, Relaciones y Atributos.

Las llaves primarias se identifican con numeral #.
Campo obligatorio se identifica con un asterisco *.
Campo opcional se identifica con el indicador ordinalº.

Vamos a tomar lo que hicimos en el diagrama lógico y físico:

El modelo físico nos va a permitir hacer la implementación de código SQL.
El modelo lógico nos va a recordar cuales son las restricciones que teníamos (constraints).
En un ambiente de desarrollo al momento de comenzar a trabajar con nuestro modelo de datos para nuestra aplicación, se recomienda al momento crear tablas borrarlas en el caso de que existan con DROP TABLE.

A la hora de estar haciendo pruebas, cuando generamos código SQL, vamos a generar tablas nuevas en nuestra base de datos, si por error creamos una tabla o ya existe una tabla al momento de aplicar nuestros cambios se pueden generar inconsistencias.

Dependiendo del motor de bases de datos, podemos sobre-escribir la estructura o no en el momento de que ya exista una tabla con ciertos atributos.

Estas tablas se van a borrar en el orden de la tabla que tenga menos relaciones con otras tablas (estas relaciones se van a romper o borrar).

Quitar tablas al comienzo no se debe utilizar en ambientes de producción al momento de crear tablas nuevas, si se hace se pueden dañar las dependencias de las tablas.

Un poco de Sintaxis:

Las lineas de código terminan en punto y coma ;.
Los comentarios en SQL se manejan con /Comentarios/

----------------------DEPENDENCIAS FUNCIONALES---------------------------

¿Cual es la diferencia entre mi Excel y mis Bases de Datos?
El excel es una tabla plana con filas y columnas, podemos manejar la data histórica y registros, sin embargo tenemos una sola tabla.

En una base de datos tenemos varias tablas con un lenguaje estructurado, ademas contamos con la normalización esta nos ayuda a no redundar en la información, o sea, tener datos repetidos, fallas con diferentes escrituras (México, Mexico (sin acento), Ciudad de México, CDMX).

Para comenzar a hablar de normalización antes tenemos que tocar el tema de Propiedades de Dependencia Funcional, estas ayudan a entender como vamos a cambiar la estructura de la base de datos y se dividen en tres niveles:

Dependencia funcional reflexiva, si tenemos un dato a, podemos llegar a un dato b, dentro de la misma tabla, siendo así que. Teniendo un identificador vamos a poder llegar a los otros datos como método y dirección en la misma tabla.
Dependencia funcional aumentativa, ademas de poder llegar de un dato a a un dato b, vamos a poder llegar de un dato a a un dato c y de un dato b a un dato c. O sea que vamos a poder acceder a los datos de otras tablas relacionadas con llaves foráneas. En esta consulta vamos a generar tuplas, teniendo un identificador y un código, vamos a traer la dirección y la fecha, tenemos un ID (1) y un código (123) y con esa clave que tenemos podemos traer mas datos.
Dependencia funcional transitiva, Teniendo una tabla X la cual se comunica con la tabla Y y esta ultima se comunica con la tabla Z. De tal manera que X va a poder llegar a Z. Así podriamos hacer una consulta de la Tabla Pasajero que se conecta con la Tabla Ruta y ruta se conecta con la Tabla Aerolinea. Así sabemos los pasajeros que tomaron cierta ruta y en que aerolinea.

Existen 5 formas de normalización, aunque inicialmente eran solamente 3.

La primera forma normal es la base de todas, sin esta no podríamos tener la siguiente (la segunda contiene la primera), y así sucesivamente hasta la quinta forma normal.

Estas formas normales no necesariamente son las mas utilizadas, generalmente uno llega hasta la tercera forma normal (la tradicional). Las otras formas se requieren cuando se necesita un nivel de detalle mas grande o cuando una base de datos no va a crecer tanto ya que por ejemplo con una base de datos de 1200 tablas las ultimas formas normales se vuelven inmanejables.

La forma de entender la primera forma normal es con el principio de atomicidad, el valor tiene que ser el mínimo posible, aquí ya no hablamos de un conjunto de pasos o transacciones, mas bien el valor como tal mínimo posible.

Por ejemplo en el atributo Nombre, el cual contiene nombres y apellidos, lo podemos segmentar en los atributos Nombre, Segundo Nombre y Apellidos. El Nombre debería ser obligatorio y Segundo Nombre opcional.

Para que se de la primera forma normal es requisito indispensable tener por lo menos una llave primaria.

En 4FN obligatoriamente no podemos repetir datos en una tabla, solo tenemos combinaciones únicas y todas las llaves van a poder ser si o si obligatoriamente llaves primarias.

En 5FN es importante tener 2 tablas que están en 4FN, cada dependencia de union (join) va a estar hecho por claves candidatas y no va puede estar hecho por condiciones que no se vayan a cumplir.


--------------ACID NO RELACIONAL------------------------

ACID este concepto es uno de los pilares de las bases de datos relacionales.con el cual se asegura la integridad y consistencia de los datos a pesar de la concurrencia proporcionando un entorno seguro para las operaciones que realizan.
Atomicidad: Es una de las principales características de las bases de datos Relacionales, que no siempre se cumplen en las Bases de Datos NoSQL
Consistencia: no siempre una base de datos noSQL es consistente en sus datos, esto se debe a su descentralizacion. Es decir que sus datos pueden estar replicados.
Aislamiento: los sistemas de datos NoSQL no siempre utilizan aislamiento debido a que manejan de manera distinta la concurrencia, mientra que bases de datos relacionales bloquean los accesos a los datos para garantizar la consistencia de los mismos. En la bases de datos NoSQL los procesos se replican, es decir se realizan copias de los mismo para cada usuario que lo solicite.
Durabilidad: es otro principio que no aplica necesariamente en los sistemas NoSQL, esto se debe a que en algunas instancias los datos no son consistentes por lo tanto no se puede garantizar la persistencia en el tiempo de los mismos. Una manera de solucionarlo esto es replicar los datos para garantizar la consistencia y durabilidad de los datos


----------------CAP----------------------

Consistency = Consistencia: Debe retornar un dato válido, me debe permitir a cualquier estructura de su base de datos
Availability = Disponibilidad: Cuando haga una solicitud no me va a importar que nodo del sistema esta up time o down time o sin funcionamiento. Un dato debe estar replicado en al menos tres nodos.
Partition = Particionamiento: Es como yo parto esa información por lo menos en tres nodos para evitar que se pierdan mensajes.